import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import random

# üîê —Ç–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = '7686855161:AAGbqBExB0RxCDOmDWRDN2UxsrEOLpFNO3U'
SPOTIFY_CLIENT_ID = 'cb965f1eaae44f73aed751f3cd56b1da'
SPOTIFY_CLIENT_SECRET = '51e42de85525450aa620ddc35f8e63a0'

# üéµ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Spotify API
sp = spotipy.Spotify(auth_manager=SpotifyClientCredentials(
    client_id=SPOTIFY_CLIENT_ID,
    client_secret=SPOTIFY_CLIENT_SECRET
))

# ü§ñ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# üéõÔ∏è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–Ω–∏–∑—É
def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(KeyboardButton("üéß –†–∞–Ω–¥–æ–º"), KeyboardButton("üî• –ó–∞—Ä—É–±–µ–∂–Ω—ã–π —Ä—ç–ø"))
    markup.row(KeyboardButton("üòå –°–ø–æ–∫–æ–π–Ω–æ–µ"), KeyboardButton("üíî –ì—Ä—É—Å—Ç–Ω–æ–µ"))
    markup.row(KeyboardButton("–°–ù–ì —Ä—ç–ø"))
    return markup

# üîç –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ç—Ä–µ–∫
def get_random_track(search_query, sent_tracks):
    results = sp.search(q=search_query, type='track', limit=50)
    tracks = results.get('tracks', {}).get('items', [])

    if not tracks:
        return None

    # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Ä–µ–ª–∏–∑–∞ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    tracks = sorted(tracks, key=lambda x: x['album']['release_date'], reverse=True)

    # –∏—â–µ–º —Ç—Ä–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –µ—â–µ –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    new_tracks = [track for track in tracks if track['id'] not in sent_tracks]

    if not new_tracks:
        return None

    track = random.choice(new_tracks[:20])  # –≤—ã–±–∏—Ä–∞–µ–º –∏–∑ —Ç–æ–ø-20 —Å–≤–µ–∂–∏—Ö
    name = track['name']
    artists = ', '.join([artist['name'] for artist in track['artists']])
    url = track['external_urls']['spotify']
    image = track['album']['images'][0]['url'] if track['album']['images'] else None

    # –¥–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö
    sent_tracks.add(track['id'])

    return f"*{name}* ‚Äî _{artists}_\n[–°–ª—É—à–∞—Ç—å –≤ Spotify]({url})", image

# üîò —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–æ–∫ –∏ –∑–∞–ø—Ä–æ—Å–æ–≤
query_map = {
    "üéß –†–∞–Ω–¥–æ–º": "us rap 2025 playlist",
    "üòå –°–ø–æ–∫–æ–π–Ω–æ–µ": "chill lofi",
    "üî• –ó–∞—Ä—É–±–µ–∂–Ω—ã–π —Ä—ç–ø": "travis scott,playboi carti,lil tecca,ken karson",
    "–°–ù–ì —Ä—ç–ø": "—Ç—Ä—ç–ø –Ω–æ–≤—ã–µ 2025, –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ä–µ–ø 2025",
    "üíî –ì—Ä—É—Å—Ç–Ω–æ–µ": "sad songs"
}


# üü¢ —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(
        message.chat.id,
        "–ø—Ä–∏–≤–µ—Ç! —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–±–∏—Ä–∞–µ—Ç –º—É–∑—ã–∫—É –ø–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ üéµ\n\n–≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –∂–∞–Ω—Ä–æ–≤ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –Ω–∏–∂–µ üëá",
        reply_markup=main_menu()
    )

# üì© –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(func=lambda message: True)
def handle_text(message):
    user_input = message.text.strip()

    if user_input not in query_map:
        bot.send_message(message.chat.id, "–Ω–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ —Å–Ω–∏–∑—É", reply_markup=main_menu())
        return

    search_query = query_map[user_input]
    bot.send_message(message.chat.id, "–≤–æ—Ç —Ç–µ–±–µ –ø–∞—Ä–∞ –ø–µ—Å–µ–Ω –ø–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ üé∂")

    # —Å–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
    if not hasattr(handle_text, "sent_tracks"):
        handle_text.sent_tracks = set()

    track_info = get_random_track(search_query, handle_text.sent_tracks)
    if track_info:
        text, img_url = track_info
        if img_url:
            bot.send_photo(message.chat.id, img_url, caption=text, parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, text, parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, "–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã–π —Ç—Ä–µ–∫ üòø")

# üöÄ –∑–∞–ø—É—Å–∫
bot.polling(none_stop=True)